""
"" FUNCTIONS
""
function! AlwaysCD()
  if bufname("") !~ "^ftp://"
    lcd %:p:h
  endif
endfunction

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

func! Cwd()
  let cwd = getcwd()
  echo cwd
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.')+0)      " from start to cursor
  let substr = matchstr(substr, "[\.\/a-z_0-9]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

function! ToggleVerbose()
    if !&verbose
        set verbosefile=~/.vim/verbose.log
        set verbose=15
    else
        set verbose=0
        set verbosefile=
    endif
endfunction

func! CurTabFileName( ) 
  return fnamemodify(bufname(winbufnr(tabpagewinnr(0))),':t') 
endfun 

func! SortTabs() 
  for i in range(tabpagenr('$'),1,-1) 
    :tabr 
    for j in range(1,i-1) 
      let t1 = CurTabFileName() 
      :tabn 
      let t2 = CurTabFileName() 
      if t1 > t2 
        tabp 
        exec ":tabmove ".j 
      endif 
    endfor 
  endfor 
endfun 

function! Dumb_TabComplete()
  if (pumvisible())
      if(g:mymode == 0)
          let g:mymode = 1
        return "\<C-X>\<C-F>"
    endif
      if(g:mymode == 1)
          let g:mymode = 2
        return "\<C-P>"
    endif
    endif
  let line = getline('.')                         " curline
  let substr = strpart(line, col('.')-2, 1)      " from start to cursor
  let substr = matchstr(substr, "[\.\/a-z_0-9]")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
  let g:mymode = 0
    return "\<tab>"
  endif
  let g:mymode = 0
  return "\<C-P>"                         " existing text matchingi
endfunction
